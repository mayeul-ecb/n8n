{"version":3,"sources":["../src/utils.ts"],"sourcesContent":["/**\n * Derive the middle key, i.e. the segment of the render key located between\n * the initial key (path to parameters root) and the property to render.\n *\n * Used by `nodeText()` to handle nested params.\n *\n * Location: `n8n-nodes-base.nodes.github.nodeView.<middleKey>.placeholder`\n */\nexport function deriveMiddleKey(path: string, parameter: { name: string; type?: string }) {\n\tlet middleKey = parameter.name;\n\n\tif (isTopLevelCollection(path, parameter) || isNestedInCollectionLike(path)) {\n\t\tconst pathSegments = normalize(path).split('.');\n\t\tmiddleKey = insertOptionsAndValues(pathSegments).join('.');\n\t}\n\n\tif (isNestedCollection(path, parameter) || isFixedCollection(path, parameter)) {\n\t\tconst pathSegments = [...normalize(path).split('.'), parameter.name];\n\t\tmiddleKey = insertOptionsAndValues(pathSegments).join('.');\n\t}\n\n\treturn middleKey;\n}\n\n/**\n * Check if a param path is for a param nested inside a `collection` or\n * `fixedCollection` param.\n */\nexport const isNestedInCollectionLike = (path: string) => path.split('.').length >= 3;\n\nconst isTopLevelCollection = (path: string, parameter: { type?: string }) =>\n\tpath.split('.').length === 2 && parameter.type === 'collection';\n\nconst isNestedCollection = (path: string, parameter: { type?: string }) =>\n\tpath.split('.').length > 2 && parameter.type === 'collection';\n\n/**\n * Check if the param is a normal `fixedCollection`, i.e. a FC other than the wrapper\n * that sits at the root of a node's top-level param and contains all of them.\n */\nconst isFixedCollection = (path: string, parameter: { type?: string }) =>\n\tparameter.type === 'fixedCollection' && path !== 'parameters';\n\n/**\n * Remove all indices and the `parameters.` prefix from a parameter path.\n *\n * Example: `parameters.a[0].b` → `a.b`\n */\nexport const normalize = (path: string) => path.replace(/\\[.*?\\]/g, '').replace('parameters.', '');\n\n/**\n * Insert `'options'` and `'values'` on an alternating basis in a string array of\n * indefinite length. Helper to create a valid render key for a collection-like param.\n *\n * Example: `['a', 'b', 'c']` → `['a', 'options', 'b', 'values', 'c']`\n */\nexport const insertOptionsAndValues = (pathSegments: string[]) => {\n\treturn pathSegments.reduce<string[]>((acc, cur, i) => {\n\t\tacc.push(cur);\n\n\t\tif (i === pathSegments.length - 1) return acc;\n\n\t\tacc.push(i % 2 === 0 ? 'options' : 'values');\n\n\t\treturn acc;\n\t}, []);\n};\n"],"mappings":";AAQO,SAAS,gBAAgB,MAAc,WAA4C;AACzF,MAAI,YAAY,UAAU;AAE1B,MAAI,qBAAqB,MAAM,SAAS,KAAK,yBAAyB,IAAI,GAAG;AAC5E,UAAM,eAAe,UAAU,IAAI,EAAE,MAAM,GAAG;AAC9C,gBAAY,uBAAuB,YAAY,EAAE,KAAK,GAAG;AAAA,EAC1D;AAEA,MAAI,mBAAmB,MAAM,SAAS,KAAK,kBAAkB,MAAM,SAAS,GAAG;AAC9E,UAAM,eAAe,CAAC,GAAG,UAAU,IAAI,EAAE,MAAM,GAAG,GAAG,UAAU,IAAI;AACnE,gBAAY,uBAAuB,YAAY,EAAE,KAAK,GAAG;AAAA,EAC1D;AAEA,SAAO;AACR;AAMO,IAAM,2BAA2B,CAAC,SAAiB,KAAK,MAAM,GAAG,EAAE,UAAU;AAEpF,IAAM,uBAAuB,CAAC,MAAc,cAC3C,KAAK,MAAM,GAAG,EAAE,WAAW,KAAK,UAAU,SAAS;AAEpD,IAAM,qBAAqB,CAAC,MAAc,cACzC,KAAK,MAAM,GAAG,EAAE,SAAS,KAAK,UAAU,SAAS;AAMlD,IAAM,oBAAoB,CAAC,MAAc,cACxC,UAAU,SAAS,qBAAqB,SAAS;AAO3C,IAAM,YAAY,CAAC,SAAiB,KAAK,QAAQ,YAAY,EAAE,EAAE,QAAQ,eAAe,EAAE;AAQ1F,IAAM,yBAAyB,CAAC,iBAA2B;AACjE,SAAO,aAAa,OAAiB,CAAC,KAAK,KAAK,MAAM;AACrD,QAAI,KAAK,GAAG;AAEZ,QAAI,MAAM,aAAa,SAAS,EAAG,QAAO;AAE1C,QAAI,KAAK,IAAI,MAAM,IAAI,YAAY,QAAQ;AAE3C,WAAO;AAAA,EACR,GAAG,CAAC,CAAC;AACN;","names":[]}