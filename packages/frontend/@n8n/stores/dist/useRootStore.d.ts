import * as pinia from 'pinia';
import * as vue from 'vue';

type RootStoreState = {
    baseUrl: string;
    restEndpoint: string;
    defaultLocale: string;
    endpointForm: string;
    endpointFormTest: string;
    endpointFormWaiting: string;
    endpointMcp: string;
    endpointMcpTest: string;
    endpointWebhook: string;
    endpointWebhookTest: string;
    endpointWebhookWaiting: string;
    timezone: string;
    executionTimeout: number;
    maxExecutionTimeout: number;
    versionCli: string;
    oauthCallbackUrls: object;
    n8nMetadata: {
        [key: string]: string | number | undefined;
    };
    pushRef: string;
    urlBaseWebhook: string;
    urlBaseEditor: string;
    instanceId: string;
    binaryDataMode: 'default' | 'filesystem' | 's3';
};
declare const useRootStore: pinia.StoreDefinition<"root", Pick<{
    baseUrl: vue.ComputedRef<string>;
    formUrl: vue.ComputedRef<string>;
    formTestUrl: vue.ComputedRef<string>;
    formWaitingUrl: vue.ComputedRef<string>;
    mcpUrl: vue.ComputedRef<string>;
    mcpTestUrl: vue.ComputedRef<string>;
    webhookUrl: vue.ComputedRef<string>;
    webhookTestUrl: vue.ComputedRef<string>;
    webhookWaitingUrl: vue.ComputedRef<string>;
    restUrl: vue.ComputedRef<string>;
    restApiContext: vue.ComputedRef<{
        baseUrl: string;
        pushRef: string;
    }>;
    urlBaseEditor: vue.ComputedRef<string>;
    versionCli: vue.ComputedRef<string>;
    instanceId: vue.ComputedRef<string>;
    pushRef: vue.ComputedRef<string>;
    defaultLocale: vue.ComputedRef<string>;
    binaryDataMode: vue.ComputedRef<"default" | "filesystem" | "s3">;
    OAuthCallbackUrls: vue.ComputedRef<object>;
    executionTimeout: vue.ComputedRef<number>;
    maxExecutionTimeout: vue.ComputedRef<number>;
    timezone: vue.ComputedRef<string>;
    setUrlBaseWebhook: (value: string) => void;
    setUrlBaseEditor: (value: string) => void;
    setEndpointForm: (value: string) => void;
    setEndpointFormTest: (value: string) => void;
    setEndpointFormWaiting: (value: string) => void;
    setEndpointWebhook: (value: string) => void;
    setEndpointWebhookTest: (value: string) => void;
    setEndpointWebhookWaiting: (value: string) => void;
    setEndpointMcp: (value: string) => void;
    setEndpointMcpTest: (value: string) => void;
    setTimezone: (value: string) => void;
    setExecutionTimeout: (value: number) => void;
    setMaxExecutionTimeout: (value: number) => void;
    setVersionCli: (value: string) => void;
    setInstanceId: (value: string) => void;
    setOauthCallbackUrls: (value: RootStoreState["oauthCallbackUrls"]) => void;
    setN8nMetadata: (value: RootStoreState["n8nMetadata"]) => void;
    setDefaultLocale: (value: string) => void;
    setBinaryDataMode: (value: RootStoreState["binaryDataMode"]) => void;
}, never>, Pick<{
    baseUrl: vue.ComputedRef<string>;
    formUrl: vue.ComputedRef<string>;
    formTestUrl: vue.ComputedRef<string>;
    formWaitingUrl: vue.ComputedRef<string>;
    mcpUrl: vue.ComputedRef<string>;
    mcpTestUrl: vue.ComputedRef<string>;
    webhookUrl: vue.ComputedRef<string>;
    webhookTestUrl: vue.ComputedRef<string>;
    webhookWaitingUrl: vue.ComputedRef<string>;
    restUrl: vue.ComputedRef<string>;
    restApiContext: vue.ComputedRef<{
        baseUrl: string;
        pushRef: string;
    }>;
    urlBaseEditor: vue.ComputedRef<string>;
    versionCli: vue.ComputedRef<string>;
    instanceId: vue.ComputedRef<string>;
    pushRef: vue.ComputedRef<string>;
    defaultLocale: vue.ComputedRef<string>;
    binaryDataMode: vue.ComputedRef<"default" | "filesystem" | "s3">;
    OAuthCallbackUrls: vue.ComputedRef<object>;
    executionTimeout: vue.ComputedRef<number>;
    maxExecutionTimeout: vue.ComputedRef<number>;
    timezone: vue.ComputedRef<string>;
    setUrlBaseWebhook: (value: string) => void;
    setUrlBaseEditor: (value: string) => void;
    setEndpointForm: (value: string) => void;
    setEndpointFormTest: (value: string) => void;
    setEndpointFormWaiting: (value: string) => void;
    setEndpointWebhook: (value: string) => void;
    setEndpointWebhookTest: (value: string) => void;
    setEndpointWebhookWaiting: (value: string) => void;
    setEndpointMcp: (value: string) => void;
    setEndpointMcpTest: (value: string) => void;
    setTimezone: (value: string) => void;
    setExecutionTimeout: (value: number) => void;
    setMaxExecutionTimeout: (value: number) => void;
    setVersionCli: (value: string) => void;
    setInstanceId: (value: string) => void;
    setOauthCallbackUrls: (value: RootStoreState["oauthCallbackUrls"]) => void;
    setN8nMetadata: (value: RootStoreState["n8nMetadata"]) => void;
    setDefaultLocale: (value: string) => void;
    setBinaryDataMode: (value: RootStoreState["binaryDataMode"]) => void;
}, "baseUrl" | "defaultLocale" | "timezone" | "executionTimeout" | "maxExecutionTimeout" | "versionCli" | "pushRef" | "urlBaseEditor" | "instanceId" | "binaryDataMode" | "formUrl" | "formTestUrl" | "formWaitingUrl" | "mcpUrl" | "mcpTestUrl" | "webhookUrl" | "webhookTestUrl" | "webhookWaitingUrl" | "restUrl" | "restApiContext" | "OAuthCallbackUrls">, Pick<{
    baseUrl: vue.ComputedRef<string>;
    formUrl: vue.ComputedRef<string>;
    formTestUrl: vue.ComputedRef<string>;
    formWaitingUrl: vue.ComputedRef<string>;
    mcpUrl: vue.ComputedRef<string>;
    mcpTestUrl: vue.ComputedRef<string>;
    webhookUrl: vue.ComputedRef<string>;
    webhookTestUrl: vue.ComputedRef<string>;
    webhookWaitingUrl: vue.ComputedRef<string>;
    restUrl: vue.ComputedRef<string>;
    restApiContext: vue.ComputedRef<{
        baseUrl: string;
        pushRef: string;
    }>;
    urlBaseEditor: vue.ComputedRef<string>;
    versionCli: vue.ComputedRef<string>;
    instanceId: vue.ComputedRef<string>;
    pushRef: vue.ComputedRef<string>;
    defaultLocale: vue.ComputedRef<string>;
    binaryDataMode: vue.ComputedRef<"default" | "filesystem" | "s3">;
    OAuthCallbackUrls: vue.ComputedRef<object>;
    executionTimeout: vue.ComputedRef<number>;
    maxExecutionTimeout: vue.ComputedRef<number>;
    timezone: vue.ComputedRef<string>;
    setUrlBaseWebhook: (value: string) => void;
    setUrlBaseEditor: (value: string) => void;
    setEndpointForm: (value: string) => void;
    setEndpointFormTest: (value: string) => void;
    setEndpointFormWaiting: (value: string) => void;
    setEndpointWebhook: (value: string) => void;
    setEndpointWebhookTest: (value: string) => void;
    setEndpointWebhookWaiting: (value: string) => void;
    setEndpointMcp: (value: string) => void;
    setEndpointMcpTest: (value: string) => void;
    setTimezone: (value: string) => void;
    setExecutionTimeout: (value: number) => void;
    setMaxExecutionTimeout: (value: number) => void;
    setVersionCli: (value: string) => void;
    setInstanceId: (value: string) => void;
    setOauthCallbackUrls: (value: RootStoreState["oauthCallbackUrls"]) => void;
    setN8nMetadata: (value: RootStoreState["n8nMetadata"]) => void;
    setDefaultLocale: (value: string) => void;
    setBinaryDataMode: (value: RootStoreState["binaryDataMode"]) => void;
}, "setUrlBaseWebhook" | "setUrlBaseEditor" | "setEndpointForm" | "setEndpointFormTest" | "setEndpointFormWaiting" | "setEndpointWebhook" | "setEndpointWebhookTest" | "setEndpointWebhookWaiting" | "setEndpointMcp" | "setEndpointMcpTest" | "setTimezone" | "setExecutionTimeout" | "setMaxExecutionTimeout" | "setVersionCli" | "setInstanceId" | "setOauthCallbackUrls" | "setN8nMetadata" | "setDefaultLocale" | "setBinaryDataMode">>;

export { type RootStoreState, useRootStore };
