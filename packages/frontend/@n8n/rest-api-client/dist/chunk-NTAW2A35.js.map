{"version":3,"sources":["../src/utils.ts"],"sourcesContent":["import { BROWSER_ID_STORAGE_KEY } from '@n8n/constants';\nimport { assert } from '@n8n/utils/assert';\nimport type { AxiosRequestConfig, Method, RawAxiosRequestHeaders } from 'axios';\nimport axios from 'axios';\nimport { ApplicationError, jsonParse } from 'n8n-workflow';\nimport type { GenericValue, IDataObject } from 'n8n-workflow';\n\nimport type { IRestApiContext } from './types';\n\nconst getBrowserId = () => {\n\tlet browserId = localStorage.getItem(BROWSER_ID_STORAGE_KEY);\n\tif (!browserId) {\n\t\tbrowserId = crypto.randomUUID();\n\t\tlocalStorage.setItem(BROWSER_ID_STORAGE_KEY, browserId);\n\t}\n\treturn browserId;\n};\n\nexport const NO_NETWORK_ERROR_CODE = 999;\nexport const STREAM_SEPERATOR = '⧉⇋⇋➽⌑⧉§§\\n';\n\nexport class MfaRequiredError extends ApplicationError {\n\tconstructor() {\n\t\tsuper('MFA is required to access this resource. Please set up MFA in your user settings.');\n\t\tthis.name = 'MfaRequiredError';\n\t}\n}\n\nexport class ResponseError extends ApplicationError {\n\t// The HTTP status code of response\n\thttpStatusCode?: number;\n\n\t// The error code in the response\n\terrorCode?: number;\n\n\t// The stack trace of the server\n\tserverStackTrace?: string;\n\n\t/**\n\t * Creates an instance of ResponseError.\n\t * @param {string} message The error message\n\t * @param {number} [errorCode] The error code which can be used by frontend to identify the actual error\n\t * @param {number} [httpStatusCode] The HTTP status code the response should have\n\t * @param {string} [stack] The stack trace\n\t */\n\tconstructor(\n\t\tmessage: string,\n\t\toptions: { errorCode?: number; httpStatusCode?: number; stack?: string } = {},\n\t) {\n\t\tsuper(message);\n\t\tthis.name = 'ResponseError';\n\n\t\tconst { errorCode, httpStatusCode, stack } = options;\n\t\tif (errorCode) {\n\t\t\tthis.errorCode = errorCode;\n\t\t}\n\t\tif (httpStatusCode) {\n\t\t\tthis.httpStatusCode = httpStatusCode;\n\t\t}\n\t\tif (stack) {\n\t\t\tthis.serverStackTrace = stack;\n\t\t}\n\t}\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst legacyParamSerializer = (params: Record<string, any>) =>\n\tObject.keys(params)\n\t\t.filter((key) => params[key] !== undefined)\n\t\t.map((key) => {\n\t\t\tif (Array.isArray(params[key])) {\n\t\t\t\treturn params[key].map((v: string) => `${key}[]=${encodeURIComponent(v)}`).join('&');\n\t\t\t}\n\t\t\tif (typeof params[key] === 'object') {\n\t\t\t\tparams[key] = JSON.stringify(params[key]);\n\t\t\t}\n\t\t\treturn `${key}=${encodeURIComponent(params[key])}`;\n\t\t})\n\t\t.join('&');\n\nexport async function request(config: {\n\tmethod: Method;\n\tbaseURL: string;\n\tendpoint: string;\n\theaders?: RawAxiosRequestHeaders;\n\tdata?: GenericValue | GenericValue[];\n\twithCredentials?: boolean;\n}) {\n\tconst { method, baseURL, endpoint, headers, data } = config;\n\tconst options: AxiosRequestConfig = {\n\t\tmethod,\n\t\turl: endpoint,\n\t\tbaseURL,\n\t\theaders: headers ?? {},\n\t};\n\tif (baseURL.startsWith('/')) {\n\t\toptions.headers!['browser-id'] = getBrowserId();\n\t}\n\tif (\n\t\timport.meta.env.NODE_ENV !== 'production' &&\n\t\t!baseURL.includes('api.n8n.io') &&\n\t\t!baseURL.includes('n8n.cloud')\n\t) {\n\t\toptions.withCredentials = options.withCredentials ?? true;\n\t}\n\tif (['POST', 'PATCH', 'PUT'].includes(method)) {\n\t\toptions.data = data;\n\t} else if (data) {\n\t\toptions.params = data;\n\t\toptions.paramsSerializer = legacyParamSerializer;\n\t}\n\n\ttry {\n\t\tconst response = await axios.request(options);\n\t\treturn response.data;\n\t} catch (error) {\n\t\tif (error.message === 'Network Error') {\n\t\t\tthrow new ResponseError(\"Can't connect to n8n.\", {\n\t\t\t\terrorCode: NO_NETWORK_ERROR_CODE,\n\t\t\t});\n\t\t}\n\n\t\tconst errorResponseData = error.response?.data;\n\t\tif (errorResponseData?.mfaRequired === true) {\n\t\t\tthrow new MfaRequiredError();\n\t\t}\n\t\tif (errorResponseData?.message !== undefined) {\n\t\t\tif (errorResponseData.name === 'NodeApiError') {\n\t\t\t\terrorResponseData.httpStatusCode = error.response.status;\n\t\t\t\tthrow errorResponseData;\n\t\t\t}\n\n\t\t\tthrow new ResponseError(errorResponseData.message, {\n\t\t\t\terrorCode: errorResponseData.code,\n\t\t\t\thttpStatusCode: error.response.status,\n\t\t\t\tstack: errorResponseData.stack,\n\t\t\t});\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n\n/**\n * Sends a request to the API and returns the response without extracting the data key.\n * @param context Rest API context\n * @param method HTTP method\n * @param endpoint relative path to the API endpoint\n * @param data request data\n * @returns data and total count\n */\nexport async function getFullApiResponse<T>(\n\tcontext: IRestApiContext,\n\tmethod: Method,\n\tendpoint: string,\n\tdata?: GenericValue | GenericValue[],\n) {\n\tconst response = await request({\n\t\tmethod,\n\t\tbaseURL: context.baseUrl,\n\t\tendpoint,\n\t\theaders: { 'push-ref': context.pushRef },\n\t\tdata,\n\t});\n\n\treturn response as { count: number; data: T };\n}\n\nexport async function makeRestApiRequest<T>(\n\tcontext: IRestApiContext,\n\tmethod: Method,\n\tendpoint: string,\n\tdata?: GenericValue | GenericValue[],\n) {\n\tconst response = await request({\n\t\tmethod,\n\t\tbaseURL: context.baseUrl,\n\t\tendpoint,\n\t\theaders: { 'push-ref': context.pushRef },\n\t\tdata,\n\t});\n\n\t// All cli rest api endpoints return data wrapped in `data` key\n\treturn response.data as T;\n}\n\nexport async function get(\n\tbaseURL: string,\n\tendpoint: string,\n\tparams?: IDataObject,\n\theaders?: RawAxiosRequestHeaders,\n) {\n\treturn await request({ method: 'GET', baseURL, endpoint, headers, data: params });\n}\n\nexport async function post(\n\tbaseURL: string,\n\tendpoint: string,\n\tparams?: IDataObject,\n\theaders?: RawAxiosRequestHeaders,\n) {\n\treturn await request({ method: 'POST', baseURL, endpoint, headers, data: params });\n}\n\nexport async function patch(\n\tbaseURL: string,\n\tendpoint: string,\n\tparams?: IDataObject,\n\theaders?: RawAxiosRequestHeaders,\n) {\n\treturn await request({ method: 'PATCH', baseURL, endpoint, headers, data: params });\n}\n\nexport async function streamRequest<T extends object>(\n\tcontext: IRestApiContext,\n\tapiEndpoint: string,\n\tpayload: object,\n\tonChunk?: (chunk: T) => void,\n\tonDone?: () => void,\n\tonError?: (e: Error) => void,\n\tseparator = STREAM_SEPERATOR,\n\tabortSignal?: AbortSignal,\n): Promise<void> {\n\tconst headers: Record<string, string> = {\n\t\t'browser-id': getBrowserId(),\n\t\t'Content-Type': 'application/json',\n\t};\n\tconst assistantRequest: RequestInit = {\n\t\theaders,\n\t\tmethod: 'POST',\n\t\tcredentials: 'include',\n\t\tbody: JSON.stringify(payload),\n\t\tsignal: abortSignal,\n\t};\n\ttry {\n\t\tconst response = await fetch(`${context.baseUrl}${apiEndpoint}`, assistantRequest);\n\n\t\tif (response.body) {\n\t\t\t// Handle the streaming response\n\t\t\tconst reader = response.body.getReader();\n\t\t\tconst decoder = new TextDecoder('utf-8');\n\n\t\t\tlet buffer = '';\n\n\t\t\tasync function readStream() {\n\t\t\t\tconst { done, value } = await reader.read();\n\t\t\t\tif (done) {\n\t\t\t\t\tonDone?.();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst chunk = decoder.decode(value);\n\t\t\t\tbuffer += chunk;\n\n\t\t\t\tconst splitChunks = buffer.split(separator);\n\n\t\t\t\tbuffer = '';\n\t\t\t\tfor (const splitChunk of splitChunks) {\n\t\t\t\t\tif (splitChunk) {\n\t\t\t\t\t\tlet data: T;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tdata = jsonParse<T>(splitChunk, { errorMessage: 'Invalid json' });\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// incomplete json. append to buffer to complete\n\t\t\t\t\t\t\tbuffer += splitChunk;\n\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\t\t\t// Call chunk callback if request was successful\n\t\t\t\t\t\t\t\tonChunk?.(data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Otherwise, call error callback\n\t\t\t\t\t\t\t\tconst message = 'message' in data ? data.message : response.statusText;\n\t\t\t\t\t\t\t\tonError?.(\n\t\t\t\t\t\t\t\t\tnew ResponseError(String(message), {\n\t\t\t\t\t\t\t\t\t\thttpStatusCode: response.status,\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e: unknown) {\n\t\t\t\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\t\t\t\tonError?.(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tawait readStream();\n\t\t\t}\n\n\t\t\t// Start reading the stream\n\t\t\tawait readStream();\n\t\t} else if (onError) {\n\t\t\tonError(new Error(response.statusText));\n\t\t}\n\t} catch (e: unknown) {\n\t\tassert(e instanceof Error);\n\t\tonError?.(e);\n\t}\n}\n"],"mappings":"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","names":[]}