{"version":3,"sources":["../src/api/api-keys.ts"],"sourcesContent":["import type {\n\tCreateApiKeyRequestDto,\n\tUpdateApiKeyRequestDto,\n\tApiKey,\n\tApiKeyWithRawValue,\n} from '@n8n/api-types';\nimport type { ApiKeyScope } from '@n8n/permissions';\n\nimport type { IRestApiContext } from '../types';\nimport { makeRestApiRequest } from '../utils';\n\nexport async function getApiKeys(context: IRestApiContext): Promise<ApiKey[]> {\n\treturn await makeRestApiRequest(context, 'GET', '/api-keys');\n}\n\nexport async function getApiKeyScopes(context: IRestApiContext): Promise<ApiKeyScope[]> {\n\treturn await makeRestApiRequest(context, 'GET', '/api-keys/scopes');\n}\n\nexport async function createApiKey(\n\tcontext: IRestApiContext,\n\tpayload: CreateApiKeyRequestDto,\n): Promise<ApiKeyWithRawValue> {\n\treturn await makeRestApiRequest(context, 'POST', '/api-keys', payload);\n}\n\nexport async function deleteApiKey(\n\tcontext: IRestApiContext,\n\tid: string,\n): Promise<{ success: boolean }> {\n\treturn await makeRestApiRequest(context, 'DELETE', `/api-keys/${id}`);\n}\n\nexport async function updateApiKey(\n\tcontext: IRestApiContext,\n\tid: string,\n\tpayload: UpdateApiKeyRequestDto,\n): Promise<{ success: boolean }> {\n\treturn await makeRestApiRequest(context, 'PATCH', `/api-keys/${id}`, payload);\n}\n"],"mappings":";;;;;AAWA,eAAsB,WAAW,SAA6C;AAC7E,SAAO,MAAM,mBAAmB,SAAS,OAAO,WAAW;AAC5D;AAEA,eAAsB,gBAAgB,SAAkD;AACvF,SAAO,MAAM,mBAAmB,SAAS,OAAO,kBAAkB;AACnE;AAEA,eAAsB,aACrB,SACA,SAC8B;AAC9B,SAAO,MAAM,mBAAmB,SAAS,QAAQ,aAAa,OAAO;AACtE;AAEA,eAAsB,aACrB,SACA,IACgC;AAChC,SAAO,MAAM,mBAAmB,SAAS,UAAU,aAAa,EAAE,EAAE;AACrE;AAEA,eAAsB,aACrB,SACA,IACA,SACgC;AAChC,SAAO,MAAM,mBAAmB,SAAS,SAAS,aAAa,EAAE,IAAI,OAAO;AAC7E;","names":[]}