{"version":3,"sources":["/home/mayeul/projects/n8n/packages/frontend/@n8n/rest-api-client/dist/chunk-BWR373PP.cjs","../src/api/workflowHistory.ts"],"names":[],"mappings":"AAAA;AACE;AACF,wDAA6B;AAC7B;AACA;ACoBO,IAAM,mBAAA,EAAqB,MAAA,CACjC,OAAA,EACA,UAAA,EACA,WAAA,EAAA,GACgC;AAChC,EAAA,MAAM,EAAE,KAAK,EAAA,EAAI,MAAM,mCAAA;AAAA,IACtB,OAAA,CAAQ,OAAA;AAAA,IACR,CAAA,2BAAA,EAA8B,UAAU,CAAA,CAAA;AACxC,IAAA;AACD,EAAA;AACO,EAAA;AACR;AAIC;AAGuB,EAAA;AACd,IAAA;AACgC,IAAA;AACzC,EAAA;AACO,EAAA;AACR;AD3B6C;AACA;AACA;AACA;AACA","file":"/home/mayeul/projects/n8n/packages/frontend/@n8n/rest-api-client/dist/chunk-BWR373PP.cjs","sourcesContent":[null,"import type { IConnections, INode } from 'n8n-workflow';\n\nimport type { IRestApiContext } from '../types';\nimport { get } from '../utils';\n\nexport type WorkflowHistory = {\n\tversionId: string;\n\tauthors: string;\n\tcreatedAt: string;\n\tupdatedAt: string;\n};\n\nexport type WorkflowVersionId = WorkflowHistory['versionId'];\n\nexport type WorkflowVersion = WorkflowHistory & {\n\tworkflowId: string;\n\tnodes: INode[];\n\tconnections: IConnections;\n};\n\nexport type WorkflowHistoryActionTypes = ['restore', 'clone', 'open', 'download'];\n\nexport type WorkflowHistoryRequestParams = { take: number; skip?: number };\n\nexport const getWorkflowHistory = async (\n\tcontext: IRestApiContext,\n\tworkflowId: string,\n\tqueryParams: WorkflowHistoryRequestParams,\n): Promise<WorkflowHistory[]> => {\n\tconst { data } = await get(\n\t\tcontext.baseUrl,\n\t\t`/workflow-history/workflow/${workflowId}`,\n\t\tqueryParams,\n\t);\n\treturn data;\n};\n\nexport const getWorkflowVersion = async (\n\tcontext: IRestApiContext,\n\tworkflowId: string,\n\tversionId: string,\n): Promise<WorkflowVersion> => {\n\tconst { data } = await get(\n\t\tcontext.baseUrl,\n\t\t`/workflow-history/workflow/${workflowId}/version/${versionId}`,\n\t);\n\treturn data;\n};\n"]}