{"version":3,"sources":["/home/mayeul/projects/n8n/packages/frontend/@n8n/rest-api-client/dist/chunk-HZTJD4WD.cjs","../src/api/users.ts"],"names":[],"mappings":"AAAA;AACE;AACF,wDAA6B;AAC7B;AACA;ACkFA,MAAA,SAAsB,gBAAA,CACrB,OAAA,EACsC;AACtC,EAAA,OAAO,MAAM,kDAAA,OAAmB,EAAS,KAAA,EAAO,QAAQ,CAAA;AACzD;AAEA,MAAA,SAAsB,KAAA,CACrB,OAAA,EACA,MAAA,EAC+B;AAC/B,EAAA,OAAO,MAAM,kDAAA,OAAmB,EAAS,MAAA,EAAQ,QAAA,EAAU,MAAM,CAAA;AAClE;AAEA,MAAA,SAAsB,MAAA,CAAO,OAAA,EAAyC;AACrE,EAAA,MAAM,kDAAA,OAAmB,EAAS,MAAA,EAAQ,SAAS,CAAA;AACpD;AAEA,MAAA,SAAsB,UAAA,CACrB,OAAA,EACA,MAAA,EAC+B;AAC/B,EAAA,OAAO,MAAM,kDAAA;AAAA,IACZ,OAAA;AAAA,IACA,MAAA;AAAA,IACA,cAAA;AAAA,IACA;AAAA,EACD,CAAA;AACD;AAEA,MAAA,SAAsB,mBAAA,CACrB,OAAA,EACA,MAAA,EACgE;AAChE,EAAA,OAAO,MAAM,kDAAA,OAAmB,EAAS,KAAA,EAAO,uBAAA,EAAyB,MAAM,CAAA;AAChF;AAEA,MAAA,SAAsB,MAAA,CACrB,OAAA,EACA,MAAA,EAO+B;AAC/B,EAAA,MAAM,EAAE,SAAA,EAAW,GAAG,MAAM,EAAA,EAAI,MAAA;AAChC,EAAA,OAAO,MAAM,kDAAA;AAAA,IACZ,OAAA;AAAA,IACA,MAAA;AAAA,IACA,CAAA,OAAA,EAAU,MAAA,CAAO,SAAS,CAAA,CAAA;AAC1B,IAAA;AACD,EAAA;AACD;AAEsB;AAII,EAAA;AAC1B;AAEsB;AAII,EAAA;AAC1B;AAGC;AAGyB,EAAA;AAC1B;AAEsB;AAIR,EAAA;AACd;AAEsB;AAIR,EAAA;AACd;AAEsB;AAKR,EAAA;AACd;AAEsB;AAIR,EAAA;AACd;AAGC;AAGyB,EAAA;AAC1B;AAGC;AAGa,EAAA;AACd;AAGC;AAGa,EAAA;AACd;AAEsB;AAIR,EAAA;AACd;AAEsB;AAII,EAAA;AAC1B;AAOsB;AAIR,EAAA;AACd;ADnK+B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/home/mayeul/projects/n8n/packages/frontend/@n8n/rest-api-client/dist/chunk-HZTJD4WD.cjs","sourcesContent":[null,"import type {\n\tLoginRequestDto,\n\tPasswordUpdateRequestDto,\n\tSettingsUpdateRequestDto,\n\tUsersListFilterDto,\n\tUserUpdateRequestDto,\n\tRole,\n\tUsersList,\n\tUser,\n} from '@n8n/api-types';\nimport type { Scope } from '@n8n/permissions';\nimport type {\n\tFeatureFlags,\n\tIDataObject,\n\tIPersonalizationSurveyAnswersV4,\n\tIUserSettings,\n} from 'n8n-workflow';\n\nimport type { IRestApiContext } from '../types';\nimport { makeRestApiRequest } from '../utils';\n\nexport type IPersonalizationSurveyAnswersV1 = {\n\tcodingSkill?: string | null;\n\tcompanyIndustry?: string[] | null;\n\tcompanySize?: string | null;\n\totherCompanyIndustry?: string | null;\n\totherWorkArea?: string | null;\n\tworkArea?: string[] | string | null;\n};\n\nexport type IPersonalizationSurveyAnswersV2 = {\n\tversion: 'v2';\n\tautomationGoal?: string | null;\n\tcodingSkill?: string | null;\n\tcompanyIndustryExtended?: string[] | null;\n\tcompanySize?: string | null;\n\tcompanyType?: string | null;\n\tcustomerType?: string | null;\n\tmspFocus?: string[] | null;\n\tmspFocusOther?: string | null;\n\totherAutomationGoal?: string | null;\n\totherCompanyIndustryExtended?: string[] | null;\n};\n\nexport type IPersonalizationSurveyAnswersV3 = {\n\tversion: 'v3';\n\tautomationGoal?: string | null;\n\totherAutomationGoal?: string | null;\n\tcompanyIndustryExtended?: string[] | null;\n\totherCompanyIndustryExtended?: string[] | null;\n\tcompanySize?: string | null;\n\tcompanyType?: string | null;\n\tautomationGoalSm?: string[] | null;\n\tautomationGoalSmOther?: string | null;\n\tusageModes?: string[] | null;\n\temail?: string | null;\n};\n\nexport type IPersonalizationLatestVersion = IPersonalizationSurveyAnswersV4;\n\nexport type IPersonalizationSurveyVersions =\n\t| IPersonalizationSurveyAnswersV1\n\t| IPersonalizationSurveyAnswersV2\n\t| IPersonalizationSurveyAnswersV3\n\t| IPersonalizationSurveyAnswersV4;\n\nexport interface IUserResponse extends User {\n\tglobalScopes?: Scope[];\n\tpersonalizationAnswers?: IPersonalizationSurveyVersions | null;\n\tsettings?: IUserSettings | null;\n}\n\nexport interface CurrentUserResponse extends IUserResponse {\n\tfeatureFlags?: FeatureFlags;\n}\n\nexport interface IUser extends IUserResponse {\n\tisDefaultUser: boolean;\n\tisPendingUser: boolean;\n\tinviteAcceptUrl?: string;\n\tfullName?: string;\n\tcreatedAt?: string;\n\tmfaEnabled: boolean;\n\tmfaAuthenticated?: boolean;\n}\n\nexport async function loginCurrentUser(\n\tcontext: IRestApiContext,\n): Promise<CurrentUserResponse | null> {\n\treturn await makeRestApiRequest(context, 'GET', '/login');\n}\n\nexport async function login(\n\tcontext: IRestApiContext,\n\tparams: LoginRequestDto,\n): Promise<CurrentUserResponse> {\n\treturn await makeRestApiRequest(context, 'POST', '/login', params);\n}\n\nexport async function logout(context: IRestApiContext): Promise<void> {\n\tawait makeRestApiRequest(context, 'POST', '/logout');\n}\n\nexport async function setupOwner(\n\tcontext: IRestApiContext,\n\tparams: { firstName: string; lastName: string; email: string; password: string },\n): Promise<CurrentUserResponse> {\n\treturn await makeRestApiRequest(\n\t\tcontext,\n\t\t'POST',\n\t\t'/owner/setup',\n\t\tparams as unknown as IDataObject,\n\t);\n}\n\nexport async function validateSignupToken(\n\tcontext: IRestApiContext,\n\tparams: { inviterId: string; inviteeId: string },\n): Promise<{ inviter: { firstName: string; lastName: string } }> {\n\treturn await makeRestApiRequest(context, 'GET', '/resolve-signup-token', params);\n}\n\nexport async function signup(\n\tcontext: IRestApiContext,\n\tparams: {\n\t\tinviterId: string;\n\t\tinviteeId: string;\n\t\tfirstName: string;\n\t\tlastName: string;\n\t\tpassword: string;\n\t},\n): Promise<CurrentUserResponse> {\n\tconst { inviteeId, ...props } = params;\n\treturn await makeRestApiRequest(\n\t\tcontext,\n\t\t'POST',\n\t\t`/users/${params.inviteeId}`,\n\t\tprops as unknown as IDataObject,\n\t);\n}\n\nexport async function sendForgotPasswordEmail(\n\tcontext: IRestApiContext,\n\tparams: { email: string },\n): Promise<void> {\n\tawait makeRestApiRequest(context, 'POST', '/forgot-password', params);\n}\n\nexport async function validatePasswordToken(\n\tcontext: IRestApiContext,\n\tparams: { token: string },\n): Promise<void> {\n\tawait makeRestApiRequest(context, 'GET', '/resolve-password-token', params);\n}\n\nexport async function changePassword(\n\tcontext: IRestApiContext,\n\tparams: { token: string; password: string; mfaCode?: string },\n): Promise<void> {\n\tawait makeRestApiRequest(context, 'POST', '/change-password', params);\n}\n\nexport async function updateCurrentUser(\n\tcontext: IRestApiContext,\n\tparams: UserUpdateRequestDto,\n): Promise<IUserResponse> {\n\treturn await makeRestApiRequest(context, 'PATCH', '/me', params);\n}\n\nexport async function updateCurrentUserSettings(\n\tcontext: IRestApiContext,\n\tsettings: SettingsUpdateRequestDto,\n): Promise<IUserSettings> {\n\treturn await makeRestApiRequest(context, 'PATCH', '/me/settings', settings);\n}\n\nexport async function updateOtherUserSettings(\n\tcontext: IRestApiContext,\n\tuserId: string,\n\tsettings: SettingsUpdateRequestDto,\n): Promise<IUserSettings> {\n\treturn await makeRestApiRequest(context, 'PATCH', `/users/${userId}/settings`, settings);\n}\n\nexport async function updateCurrentUserPassword(\n\tcontext: IRestApiContext,\n\tparams: PasswordUpdateRequestDto,\n): Promise<void> {\n\treturn await makeRestApiRequest(context, 'PATCH', '/me/password', params);\n}\n\nexport async function deleteUser(\n\tcontext: IRestApiContext,\n\t{ id, transferId }: { id: string; transferId?: string },\n): Promise<void> {\n\tawait makeRestApiRequest(context, 'DELETE', `/users/${id}`, transferId ? { transferId } : {});\n}\n\nexport async function getUsers(\n\tcontext: IRestApiContext,\n\tfilter?: UsersListFilterDto,\n): Promise<UsersList> {\n\treturn await makeRestApiRequest(context, 'GET', '/users', filter);\n}\n\nexport async function getInviteLink(\n\tcontext: IRestApiContext,\n\t{ id }: { id: string },\n): Promise<{ link: string }> {\n\treturn await makeRestApiRequest(context, 'GET', `/users/${id}/invite-link`);\n}\n\nexport async function getPasswordResetLink(\n\tcontext: IRestApiContext,\n\t{ id }: { id: string },\n): Promise<{ link: string }> {\n\treturn await makeRestApiRequest(context, 'GET', `/users/${id}/password-reset-link`);\n}\n\nexport async function submitPersonalizationSurvey(\n\tcontext: IRestApiContext,\n\tparams: IPersonalizationLatestVersion,\n): Promise<void> {\n\tawait makeRestApiRequest(context, 'POST', '/me/survey', params as unknown as IDataObject);\n}\n\nexport interface UpdateGlobalRolePayload {\n\tid: string;\n\tnewRoleName: Role;\n}\n\nexport async function updateGlobalRole(\n\tcontext: IRestApiContext,\n\t{ id, newRoleName }: UpdateGlobalRolePayload,\n): Promise<IUserResponse> {\n\treturn await makeRestApiRequest(context, 'PATCH', `/users/${id}/role`, { newRoleName });\n}\n"]}