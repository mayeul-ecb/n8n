{"version":3,"sources":["../src/api/workflowHistory.ts"],"sourcesContent":["import type { IConnections, INode } from 'n8n-workflow';\n\nimport type { IRestApiContext } from '../types';\nimport { get } from '../utils';\n\nexport type WorkflowHistory = {\n\tversionId: string;\n\tauthors: string;\n\tcreatedAt: string;\n\tupdatedAt: string;\n};\n\nexport type WorkflowVersionId = WorkflowHistory['versionId'];\n\nexport type WorkflowVersion = WorkflowHistory & {\n\tworkflowId: string;\n\tnodes: INode[];\n\tconnections: IConnections;\n};\n\nexport type WorkflowHistoryActionTypes = ['restore', 'clone', 'open', 'download'];\n\nexport type WorkflowHistoryRequestParams = { take: number; skip?: number };\n\nexport const getWorkflowHistory = async (\n\tcontext: IRestApiContext,\n\tworkflowId: string,\n\tqueryParams: WorkflowHistoryRequestParams,\n): Promise<WorkflowHistory[]> => {\n\tconst { data } = await get(\n\t\tcontext.baseUrl,\n\t\t`/workflow-history/workflow/${workflowId}`,\n\t\tqueryParams,\n\t);\n\treturn data;\n};\n\nexport const getWorkflowVersion = async (\n\tcontext: IRestApiContext,\n\tworkflowId: string,\n\tversionId: string,\n): Promise<WorkflowVersion> => {\n\tconst { data } = await get(\n\t\tcontext.baseUrl,\n\t\t`/workflow-history/workflow/${workflowId}/version/${versionId}`,\n\t);\n\treturn data;\n};\n"],"mappings":";;;;;AAwBO,IAAM,qBAAqB,OACjC,SACA,YACA,gBACgC;AAChC,QAAM,EAAE,KAAK,IAAI,MAAM;AAAA,IACtB,QAAQ;AAAA,IACR,8BAA8B,UAAU;AAAA,IACxC;AAAA,EACD;AACA,SAAO;AACR;AAEO,IAAM,qBAAqB,OACjC,SACA,YACA,cAC8B;AAC9B,QAAM,EAAE,KAAK,IAAI,MAAM;AAAA,IACtB,QAAQ;AAAA,IACR,8BAA8B,UAAU,YAAY,SAAS;AAAA,EAC9D;AACA,SAAO;AACR;","names":[]}