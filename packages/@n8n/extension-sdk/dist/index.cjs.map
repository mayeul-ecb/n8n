{"version":3,"sources":["../src/index.ts","../src/schema.ts"],"sourcesContent":["export * from './schema';\n","import { z } from 'zod';\n\n/**\n * Schema for the extension configuration.\n */\nexport const extensionManifestSchema = z.object({\n\t/**\n\t * Name of the extension package.\n\t */\n\tname: z.string(),\n\n\t/**\n\t * The display name of the extension.\n\t */\n\tdisplayName: z.string(),\n\n\t/**\n\t * Description of the extension package.\n\t */\n\tdescription: z.string(),\n\n\t/**\n\t * Publisher of the extension.\n\t */\n\tpublisher: z.string(),\n\n\t/**\n\t * Version of the extension package.\n\t */\n\tversion: z.string(),\n\n\t/**\n\t * Category the extension belongs to.\n\t */\n\tcategories: z.array(z.string()),\n\n\t/**\n\t * Setup paths for backend and frontend code entry points.\n\t */\n\tentry: z.object({\n\t\t/**\n\t\t * Path to the backend entry file.\n\t\t */\n\t\tbackend: z.string(),\n\t\t/**\n\t\t * Path to the frontend entry file.\n\t\t */\n\t\tfrontend: z.string(),\n\t}),\n\n\t/**\n\t * Minimum SDK version required to run the extension.\n\t */\n\tminSDKVersion: z.string(),\n\n\t/**\n\t * Permissions object specifying allowed access for frontend and backend.\n\t */\n\tpermissions: z.object({\n\t\t/**\n\t\t * List of frontend permissions (array of strings).\n\t\t */\n\t\tfrontend: z.array(z.string()),\n\t\t/**\n\t\t * List of backend permissions (array of strings).\n\t\t */\n\t\tbackend: z.array(z.string()),\n\t}),\n\n\t/**\n\t * List of events that the extension listens to.\n\t */\n\tevents: z.array(z.string()),\n\n\t/**\n\t * Define extension points for existing functionalities.\n\t */\n\textends: z.object({\n\t\t/**\n\t\t * Extends the views configuration.\n\t\t */\n\t\tviews: z.object({\n\t\t\t/**\n\t\t\t * Extends the workflows view configuration.\n\t\t\t */\n\t\t\tworkflows: z.object({\n\t\t\t\t/**\n\t\t\t\t * Header component for the workflows view.\n\t\t\t\t */\n\t\t\t\theader: z.string(),\n\t\t\t}),\n\t\t}),\n\t}),\n});\n\nexport type ExtensionManifest = z.infer<typeof extensionManifestSchema>;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,iBAAkB;AAKX,IAAM,0BAA0B,aAAE,OAAO;AAAA;AAAA;AAAA;AAAA,EAI/C,MAAM,aAAE,OAAO;AAAA;AAAA;AAAA;AAAA,EAKf,aAAa,aAAE,OAAO;AAAA;AAAA;AAAA;AAAA,EAKtB,aAAa,aAAE,OAAO;AAAA;AAAA;AAAA;AAAA,EAKtB,WAAW,aAAE,OAAO;AAAA;AAAA;AAAA;AAAA,EAKpB,SAAS,aAAE,OAAO;AAAA;AAAA;AAAA;AAAA,EAKlB,YAAY,aAAE,MAAM,aAAE,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA,EAK9B,OAAO,aAAE,OAAO;AAAA;AAAA;AAAA;AAAA,IAIf,SAAS,aAAE,OAAO;AAAA;AAAA;AAAA;AAAA,IAIlB,UAAU,aAAE,OAAO;AAAA,EACpB,CAAC;AAAA;AAAA;AAAA;AAAA,EAKD,eAAe,aAAE,OAAO;AAAA;AAAA;AAAA;AAAA,EAKxB,aAAa,aAAE,OAAO;AAAA;AAAA;AAAA;AAAA,IAIrB,UAAU,aAAE,MAAM,aAAE,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA,IAI5B,SAAS,aAAE,MAAM,aAAE,OAAO,CAAC;AAAA,EAC5B,CAAC;AAAA;AAAA;AAAA;AAAA,EAKD,QAAQ,aAAE,MAAM,aAAE,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA,EAK1B,SAAS,aAAE,OAAO;AAAA;AAAA;AAAA;AAAA,IAIjB,OAAO,aAAE,OAAO;AAAA;AAAA;AAAA;AAAA,MAIf,WAAW,aAAE,OAAO;AAAA;AAAA;AAAA;AAAA,QAInB,QAAQ,aAAE,OAAO;AAAA,MAClB,CAAC;AAAA,IACF,CAAC;AAAA,EACF,CAAC;AACF,CAAC;","names":[]}