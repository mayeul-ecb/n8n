{"version":3,"sources":["/home/mayeul/projects/n8n/packages/@n8n/utils/dist/event-bus.cjs","../src/event-bus.ts"],"names":[],"mappings":"AAAA;AC0CO,SAAS,cAAA,CAAA,EAGW;AAC1B,EAAA,MAAM,SAAA,kBAAW,IAAI,GAAA,CAA0B,CAAA;AAE/C,EAAA,OAAO;AAAA,IACN,EAAA,CAAG,SAAA,EAAW,EAAA,EAAI;AACjB,MAAA,IAAI,SAAA,EAAW,QAAA,CAAS,GAAA,CAAI,SAAS,CAAA;AACrC,MAAA,GAAA,CAAI,CAAC,QAAA,EAAU;AACd,QAAA,SAAA,EAAW,CAAC,EAAE,CAAA;AAAA,MACf,EAAA,KAAO;AACN,QAAA,QAAA,CAAS,IAAA,CAAK,EAAE,CAAA;AAAA,MACjB;AACA,MAAA,QAAA,CAAS,GAAA,CAAI,SAAA,EAAW,QAAQ,CAAA;AAAA,IACjC,CAAA;AAAA,IAEA,IAAA,CAAK,SAAA,EAAW,EAAA,EAAI;AACnB,MAAA,MAAM,QAAA,EAAqB,CAAC,OAAA,EAAA,GAAY;AACvC,QAAA,IAAA,CAAK,GAAA,CAAI,SAAA,EAAW,OAAO,CAAA;AAC3B,QAAA,EAAA,CAAG,OAAO,CAAA;AAAA,MACX,CAAA;AACA,MAAA,IAAA,CAAK,EAAA,CAAG,SAAA,EAAW,OAAO,CAAA;AAAA,IAC3B,CAAA;AAAA,IAEA,GAAA,CAAI,SAAA,EAAW,EAAA,EAAI;AAClB,MAAA,MAAM,SAAA,EAAW,QAAA,CAAS,GAAA,CAAI,SAAS,CAAA;AACvC,MAAA,GAAA,CAAI,QAAA,EAAU;AACb,QAAA,QAAA,CAAS,MAAA,CAAO,QAAA,CAAS,OAAA,CAAQ,EAAE,EAAA,IAAM,CAAA,EAAG,CAAC,CAAA;AAAA,MAC9C;AAAA,IACD,CAAA;AAAA,IAEA,IAAA,CAAK,SAAA,EAAW,KAAA,EAAO;AACtB,MAAA,MAAM,SAAA,EAAW,QAAA,CAAS,GAAA,CAAI,SAAS,CAAA;AACvC,MAAA,GAAA,CAAI,QAAA,EAAU;AACb,QAAA,QAAA,CAAS,KAAA,CAAM,CAAA,CAAE,OAAA,CAAQ,CAAC,OAAA,EAAA,GAAY;AACrC,UAAA,OAAA,CAAQ,KAAK,CAAA;AAAA,QACd,CAAC,CAAA;AAAA,MACF;AAAA,IACD;AAAA,EACD,CAAA;AACD;AD/CA;AACE;AACF,wCAAC","file":"/home/mayeul/projects/n8n/packages/@n8n/utils/dist/event-bus.cjs","sourcesContent":[null,"// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type CallbackFn = (...args: any[]) => any;\n\ntype Payloads<ListenerMap> = {\n\t[E in keyof ListenerMap]: unknown;\n};\n\ntype Listener<Payload> = (payload: Payload) => void;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface EventBus<ListenerMap extends Payloads<ListenerMap> = Record<string, any>> {\n\ton<EventName extends keyof ListenerMap & string>(\n\t\teventName: EventName,\n\t\tfn: Listener<ListenerMap[EventName]>,\n\t): void;\n\n\tonce<EventName extends keyof ListenerMap & string>(\n\t\teventName: EventName,\n\t\tfn: Listener<ListenerMap[EventName]>,\n\t): void;\n\n\toff<EventName extends keyof ListenerMap & string>(\n\t\teventName: EventName,\n\t\tfn: Listener<ListenerMap[EventName]>,\n\t): void;\n\n\temit<EventName extends keyof ListenerMap & string>(\n\t\teventName: EventName,\n\t\tevent?: ListenerMap[EventName],\n\t): void;\n}\n\n/**\n * Creates an event bus with the given listener map.\n *\n * @example\n * ```ts\n * const eventBus = createEventBus<{\n *   'user-logged-in': { username: string };\n *   'user-logged-out': never;\n * }>();\n */\nexport function createEventBus<\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tListenerMap extends Payloads<ListenerMap> = Record<string, any>,\n>(): EventBus<ListenerMap> {\n\tconst handlers = new Map<string, CallbackFn[]>();\n\n\treturn {\n\t\ton(eventName, fn) {\n\t\t\tlet eventFns = handlers.get(eventName);\n\t\t\tif (!eventFns) {\n\t\t\t\teventFns = [fn];\n\t\t\t} else {\n\t\t\t\teventFns.push(fn);\n\t\t\t}\n\t\t\thandlers.set(eventName, eventFns);\n\t\t},\n\n\t\tonce(eventName, fn) {\n\t\t\tconst handler: typeof fn = (payload) => {\n\t\t\t\tthis.off(eventName, handler);\n\t\t\t\tfn(payload);\n\t\t\t};\n\t\t\tthis.on(eventName, handler);\n\t\t},\n\n\t\toff(eventName, fn) {\n\t\t\tconst eventFns = handlers.get(eventName);\n\t\t\tif (eventFns) {\n\t\t\t\teventFns.splice(eventFns.indexOf(fn) >>> 0, 1);\n\t\t\t}\n\t\t},\n\n\t\temit(eventName, event) {\n\t\t\tconst eventFns = handlers.get(eventName);\n\t\t\tif (eventFns) {\n\t\t\t\teventFns.slice().forEach((handler) => {\n\t\t\t\t\thandler(event);\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t};\n}\n"]}