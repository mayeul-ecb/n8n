{"version":3,"sources":["/home/mayeul/projects/n8n/packages/@n8n/utils/dist/event-queue.cjs","../src/event-queue.ts"],"names":[],"mappings":"AAAA;ACMO,SAAS,gBAAA,CAAoB,YAAA,EAA2C;AAE9E,EAAA,MAAM,MAAA,EAAa,CAAC,CAAA;AAGpB,EAAA,IAAI,WAAA,EAAa,KAAA;AAKjB,EAAA,MAAA,SAAe,WAAA,CAAA,EAA6B;AAC3C,IAAA,GAAA,CAAI,WAAA,GAAc,KAAA,CAAM,OAAA,IAAW,CAAA,EAAG;AACrC,MAAA,MAAA;AAAA,IACD;AAEA,IAAA,WAAA,EAAa,IAAA;AACb,IAAA,MAAM,aAAA,EAAe,KAAA,CAAM,KAAA,CAAM,CAAA;AAEjC,IAAA,GAAA,CAAI,aAAA,IAAiB,KAAA,CAAA,EAAW;AAC/B,MAAA,IAAI;AACH,QAAA,MAAM,YAAA,CAAa,YAAY,CAAA;AAAA,MAChC,EAAA,MAAA,CAAS,KAAA,EAAO;AACf,QAAA,OAAA,CAAQ,KAAA,CAAM,yBAAA,EAA2B,KAAK,CAAA;AAAA,MAC/C;AAAA,IACD;AAEA,IAAA,WAAA,EAAa,KAAA;AAGb,IAAA,MAAM,WAAA,CAAY,CAAA;AAAA,EACnB;AAOA,EAAA,SAAS,OAAA,CAAQ,KAAA,EAAgB;AAChC,IAAA,KAAA,CAAM,IAAA,CAAK,KAAK,CAAA;AAChB,IAAA,KAAK,WAAA,CAAY,CAAA;AAAA,EAClB;AAEA,EAAA,OAAO,EAAE,QAAQ,CAAA;AAClB;ADvBA;AACE;AACF,4CAAC","file":"/home/mayeul/projects/n8n/packages/@n8n/utils/dist/event-queue.cjs","sourcesContent":[null,"/**\n * Create an event queue that processes events sequentially.\n *\n * @param processEvent - Async function that processes a single event.\n * @returns A function that enqueues events for processing.\n */\nexport function createEventQueue<T>(processEvent: (event: T) => Promise<void>) {\n\t// The internal queue holding events.\n\tconst queue: T[] = [];\n\n\t// Flag to indicate whether an event is currently being processed.\n\tlet processing = false;\n\n\t/**\n\t * Process the next event in the queue (if not already processing).\n\t */\n\tasync function processNext(): Promise<void> {\n\t\tif (processing || queue.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tprocessing = true;\n\t\tconst currentEvent = queue.shift();\n\n\t\tif (currentEvent !== undefined) {\n\t\t\ttry {\n\t\t\t\tawait processEvent(currentEvent);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error processing event:', error);\n\t\t\t}\n\t\t}\n\n\t\tprocessing = false;\n\n\t\t// Recursively process the next event.\n\t\tawait processNext();\n\t}\n\n\t/**\n\t * Enqueue an event and trigger processing.\n\t *\n\t * @param event - The event to enqueue.\n\t */\n\tfunction enqueue(event: T): void {\n\t\tqueue.push(event);\n\t\tvoid processNext();\n\t}\n\n\treturn { enqueue };\n}\n"]}