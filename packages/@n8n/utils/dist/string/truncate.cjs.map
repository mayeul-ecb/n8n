{"version":3,"sources":["/home/mayeul/projects/n8n/packages/@n8n/utils/dist/string/truncate.cjs","../../src/string/truncate.ts"],"names":[],"mappings":"AAAA;ACAO,IAAM,SAAA,EAAW,CAAC,IAAA,EAAc,OAAA,EAAS,EAAA,EAAA,GAC/C,IAAA,CAAK,OAAA,EAAS,OAAA,EAAS,IAAA,CAAK,KAAA,CAAM,CAAA,EAAG,MAAM,EAAA,EAAI,MAAA,EAAQ,IAAA;AAQjD,SAAS,kBAAA,CAAmB,IAAA,EAAc,SAAA,EAA2B;AAC3E,EAAA,MAAM,MAAA,EAAkB,CAAC,CAAA;AAEzB,EAAA,MAAM,UAAA,EAAY,IAAI,IAAA,CAAK,SAAA,CAAU,KAAA,CAAA,EAAW,EAAE,WAAA,EAAa,WAAW,CAAC,CAAA;AAE3E,EAAA,IAAA,CAAA,MAAW,EAAE,QAAQ,EAAA,GAAK,SAAA,CAAU,OAAA,CAAQ,IAAI,CAAA,EAAG;AAClD,IAAA,KAAA,CAAM,IAAA,CAAK,OAAO,CAAA;AAAA,EACnB;AAEA,EAAA,GAAA,CAAI,KAAA,CAAM,OAAA,GAAU,SAAA,EAAW;AAC9B,IAAA,OAAO,IAAA;AAAA,EACR;AAEA,EAAA,MAAM,oBAAA,EAAsB,KAAA,CAAM,aAAA,CAAc,CAAC,EAAA,EAAA,GAAO,EAAA,CAAG,KAAA,CAAM,OAAO,CAAC,CAAA;AACzE,EAAA,MAAM,cAAA,EAAgB,oBAAA,EAAsB,CAAA;AAC5C,EAAA,MAAM,SAAA,EAAW,KAAA,CAAM,KAAA,CAAM,aAAa,CAAA;AAC1C,EAAA,MAAM,SAAA,EAAW,QAAA;AACjB,EAAA,MAAM,eAAA,EAAiB,QAAA,CAAS,MAAA;AAEhC,EAAA,GAAA,CAAI,QAAA,CAAS,OAAA,EAAS,EAAA,EAAI;AACzB,IAAA,MAAM,cAAA,EAAgB,KAAA,CAAM,OAAA,EAAS,UAAA,EAAY,cAAA;AACjD,IAAA,MAAM,oBAAA,EAAsB,aAAA;AAC5B,IAAA,MAAM,WAAA,EAAa,oBAAA,EAAsB,aAAA;AAEzC,IAAA,GAAA,CAAI,WAAA,EAAa,CAAA,EAAG;AACnB,MAAA,OACC,KAAA,CAAM,KAAA,CAAM,CAAA,EAAG,UAAU,CAAA,CAAE,IAAA,CAAK,EAAE,EAAA,EAAI,SAAA,EAAW,KAAA,CAAM,KAAA,CAAM,mBAAmB,CAAA,CAAE,IAAA,CAAK,EAAE,CAAA;AAAA,IAE3F;AAAA,EACD;AAEA,EAAA,OACC,KAAA,CAAM,KAAA,CAAM,CAAA,EAAG,UAAA,EAAY,EAAA,EAAI,cAAc,CAAA,CAAE,IAAA,CAAK,EAAE,EAAA,EAAI,SAAA,EAAW,KAAA,CAAM,KAAA,CAAM,CAAA,CAAE,CAAA,CAAE,IAAA,CAAK,EAAE,CAAA;AAE9F;ADjBA;AACE;AACA;AACF,6EAAC","file":"/home/mayeul/projects/n8n/packages/@n8n/utils/dist/string/truncate.cjs","sourcesContent":[null,"export const truncate = (text: string, length = 30): string =>\n\ttext.length > length ? text.slice(0, length) + '...' : text;\n\n/**\n * Replace part of given text with ellipsis following the rules below:\n *\n * - Remove chars just before the last word, as long as the last word is under 15 chars\n * - Otherwise preserve the last 5 chars of the name and remove chars before that\n */\nexport function truncateBeforeLast(text: string, maxLength: number): string {\n\tconst chars: string[] = [];\n\n\tconst segmenter = new Intl.Segmenter(undefined, { granularity: 'grapheme' });\n\n\tfor (const { segment } of segmenter.segment(text)) {\n\t\tchars.push(segment);\n\t}\n\n\tif (chars.length <= maxLength) {\n\t\treturn text;\n\t}\n\n\tconst lastWhitespaceIndex = chars.findLastIndex((ch) => ch.match(/^\\s+$/));\n\tconst lastWordIndex = lastWhitespaceIndex + 1;\n\tconst lastWord = chars.slice(lastWordIndex);\n\tconst ellipsis = 'â€¦';\n\tconst ellipsisLength = ellipsis.length;\n\n\tif (lastWord.length < 15) {\n\t\tconst charsToRemove = chars.length - maxLength + ellipsisLength;\n\t\tconst indexBeforeLastWord = lastWordIndex;\n\t\tconst keepLength = indexBeforeLastWord - charsToRemove;\n\n\t\tif (keepLength > 0) {\n\t\t\treturn (\n\t\t\t\tchars.slice(0, keepLength).join('') + ellipsis + chars.slice(indexBeforeLastWord).join('')\n\t\t\t);\n\t\t}\n\t}\n\n\treturn (\n\t\tchars.slice(0, maxLength - 5 - ellipsisLength).join('') + ellipsis + chars.slice(-5).join('')\n\t);\n}\n"]}