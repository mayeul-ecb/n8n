{"version":3,"sources":["../src/event-queue.ts"],"sourcesContent":["/**\n * Create an event queue that processes events sequentially.\n *\n * @param processEvent - Async function that processes a single event.\n * @returns A function that enqueues events for processing.\n */\nexport function createEventQueue<T>(processEvent: (event: T) => Promise<void>) {\n\t// The internal queue holding events.\n\tconst queue: T[] = [];\n\n\t// Flag to indicate whether an event is currently being processed.\n\tlet processing = false;\n\n\t/**\n\t * Process the next event in the queue (if not already processing).\n\t */\n\tasync function processNext(): Promise<void> {\n\t\tif (processing || queue.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tprocessing = true;\n\t\tconst currentEvent = queue.shift();\n\n\t\tif (currentEvent !== undefined) {\n\t\t\ttry {\n\t\t\t\tawait processEvent(currentEvent);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error processing event:', error);\n\t\t\t}\n\t\t}\n\n\t\tprocessing = false;\n\n\t\t// Recursively process the next event.\n\t\tawait processNext();\n\t}\n\n\t/**\n\t * Enqueue an event and trigger processing.\n\t *\n\t * @param event - The event to enqueue.\n\t */\n\tfunction enqueue(event: T): void {\n\t\tqueue.push(event);\n\t\tvoid processNext();\n\t}\n\n\treturn { enqueue };\n}\n"],"mappings":";AAMO,SAAS,iBAAoB,cAA2C;AAE9E,QAAM,QAAa,CAAC;AAGpB,MAAI,aAAa;AAKjB,iBAAe,cAA6B;AAC3C,QAAI,cAAc,MAAM,WAAW,GAAG;AACrC;AAAA,IACD;AAEA,iBAAa;AACb,UAAM,eAAe,MAAM,MAAM;AAEjC,QAAI,iBAAiB,QAAW;AAC/B,UAAI;AACH,cAAM,aAAa,YAAY;AAAA,MAChC,SAAS,OAAO;AACf,gBAAQ,MAAM,2BAA2B,KAAK;AAAA,MAC/C;AAAA,IACD;AAEA,iBAAa;AAGb,UAAM,YAAY;AAAA,EACnB;AAOA,WAAS,QAAQ,OAAgB;AAChC,UAAM,KAAK,KAAK;AAChB,SAAK,YAAY;AAAA,EAClB;AAEA,SAAO,EAAE,QAAQ;AAClB;","names":[]}