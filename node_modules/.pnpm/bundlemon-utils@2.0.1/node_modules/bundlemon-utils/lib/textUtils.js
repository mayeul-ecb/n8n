"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReportConclusionText = exports.getLimitsCellText = exports.getDiffPercentText = exports.getDiffSizeText = exports.getSignText = void 0;
const bytes_1 = __importDefault(require("bytes"));
const consts_1 = require("./consts");
function getSignText(num) {
    return num > 0 ? '+' : '';
}
exports.getSignText = getSignText;
function getDiffSizeText(size) {
    return `${getSignText(size)}${(0, bytes_1.default)(size)}`;
}
exports.getDiffSizeText = getDiffSizeText;
function getDiffPercentText(percent) {
    if (Number.isFinite(percent)) {
        return `${getSignText(percent)}${percent}%`;
    }
    return '-';
}
exports.getDiffPercentText = getDiffPercentText;
function getLimitsCellText(file) {
    const limits = [];
    if (file.maxSize) {
        limits.push((0, bytes_1.default)(file.maxSize));
    }
    if (file.maxPercentIncrease) {
        limits.push(`+${file.maxPercentIncrease}%`);
    }
    if (limits.length === 0) {
        return '-';
    }
    return limits.join(' / ');
}
exports.getLimitsCellText = getLimitsCellText;
function getReportConclusionText(report) {
    const { stats, status, files, groups } = report;
    if (status === consts_1.Status.Pass) {
        return stats.diff.bytes === 0
            ? 'No change in files bundle size'
            : `${getDiffSizeText(stats.diff.bytes)} ${Number.isFinite(stats.diff.percent) ? getDiffPercentText(stats.diff.percent) : ''} total files change`;
    }
    const fileFails = files.filter((f) => f.status === consts_1.Status.Fail);
    const groupFails = groups.filter((g) => g.status === consts_1.Status.Fail);
    if (fileFails.length > 1 || groupFails.length > 1 || (fileFails.length > 0 && groupFails.length > 0)) {
        return 'Multiple limits exceeded';
    }
    if (fileFails?.[0]) {
        return getReportConclusionTextForSingleFail(fileFails[0], 'file');
    }
    else if (groupFails?.[0]) {
        return getReportConclusionTextForSingleFail(groupFails[0], 'group');
    }
    // Shouldn't happen
    return 'Check failed';
}
exports.getReportConclusionText = getReportConclusionText;
function getReportConclusionTextForSingleFail(singleFail, type) {
    if (!singleFail.failReasons) {
        // Shouldn't happen
        return 'Check failed';
    }
    if (singleFail.failReasons.length > 1) {
        return `Multiple limits exceeded in ${type}: ${singleFail.path}`;
    }
    else if (singleFail.failReasons.length === 1) {
        if (singleFail.maxSize && singleFail.failReasons[0] === consts_1.FailReason.MaxSize) {
            return `Max size exceeded in ${type} "${singleFail.path}": ${(0, bytes_1.default)(singleFail.size)} > ${(0, bytes_1.default)(singleFail.maxSize)}`;
        }
        else if (singleFail.maxPercentIncrease && singleFail.failReasons[0] === consts_1.FailReason.MaxPercentIncrease) {
            return `Max percent increase exceeded ${type} "${singleFail.path}": +${singleFail.diff.percent}% > +${singleFail.maxPercentIncrease}%`;
        }
        else {
            return `Some limits exceeded in ${type}: ${singleFail.path}`;
        }
    }
    else {
        return 'Check failed';
    }
}
