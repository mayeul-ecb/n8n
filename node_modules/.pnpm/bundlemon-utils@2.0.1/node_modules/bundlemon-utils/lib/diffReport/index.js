"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateDiffReport = exports.calcDiffFiles = void 0;
const consts_1 = require("../consts");
const utils_1 = require("./utils");
function calcDiffFiles(currFiles, baseFiles = []) {
    const filesMap = new Map();
    const basefilesMap = new Map();
    let totalStatus = consts_1.Status.Pass;
    const filesNames = new Set();
    const files = [];
    const stats = {
        currBranchSize: 0,
        baseBranchSize: 0,
    };
    currFiles.forEach((f) => {
        filesMap.set(f.path, f);
        filesNames.add(f.path);
    });
    baseFiles.forEach((f) => {
        basefilesMap.set(f.path, f);
        filesNames.add(f.path);
    });
    Array.from(filesNames)
        .sort()
        .forEach((filename) => {
        const currBranchFile = filesMap.get(filename);
        const baseBranchFile = basefilesMap.get(filename);
        const fileDetails = (currBranchFile || baseBranchFile);
        const diffBytes = (currBranchFile?.size ?? 0) - (baseBranchFile?.size ?? 0);
        const diffPercent = (0, utils_1.getPercentageDiff)(currBranchFile?.size ?? 0, baseBranchFile?.size ?? 0);
        const change = (0, utils_1.calcChange)({
            isExistsInCurrBranch: !!currBranchFile,
            isExistsInBaseBranch: !!baseBranchFile,
            diffBytes,
        });
        const statusObj = (0, utils_1.getStatusObject)({ currBranchFile, change, diffPercent });
        if (statusObj.status === consts_1.Status.Fail) {
            totalStatus = consts_1.Status.Fail;
        }
        const file = {
            ...statusObj,
            ...fileDetails,
            size: currBranchFile?.size ?? 0,
            diff: {
                change,
                bytes: diffBytes,
                percent: diffPercent,
            },
        };
        if (currBranchFile?.maxSize) {
            file.maxSize = currBranchFile?.maxSize;
        }
        if (currBranchFile?.maxPercentIncrease) {
            file.maxPercentIncrease = currBranchFile?.maxPercentIncrease;
        }
        files.push(file);
        stats.currBranchSize += currBranchFile?.size ?? 0;
        stats.baseBranchSize += baseBranchFile?.size ?? 0;
    });
    const diffBytes = stats.currBranchSize - stats.baseBranchSize;
    const diffPercent = (0, utils_1.getPercentageDiff)(stats.currBranchSize, stats.baseBranchSize);
    return {
        files,
        stats: {
            ...stats,
            diff: {
                bytes: diffBytes,
                percent: diffPercent,
            },
        },
        status: totalStatus,
    };
}
exports.calcDiffFiles = calcDiffFiles;
function generateDiffReport(currInput, baseInput) {
    const filesDiffReport = calcDiffFiles(currInput.files, baseInput?.files);
    const groupsDiffReport = calcDiffFiles(currInput.groups, baseInput?.groups);
    const status = filesDiffReport.status === consts_1.Status.Fail || groupsDiffReport.status === consts_1.Status.Fail ? consts_1.Status.Fail : consts_1.Status.Pass;
    return { files: filesDiffReport.files, groups: groupsDiffReport.files, stats: filesDiffReport.stats, status };
}
exports.generateDiffReport = generateDiffReport;
