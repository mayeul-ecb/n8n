"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStatusObject = exports.calcChange = exports.getPercentageDiff = void 0;
const consts_1 = require("../consts");
function roundDecimals(num, decimals) {
    return Number(Math.round(Number(num + 'e' + decimals)) + 'e-' + decimals);
}
function getPercentageDiff(a, b) {
    const percent = ((a - b) / b) * 100;
    const diff = Number.isFinite(percent) ? roundDecimals(percent, 2) : percent;
    return Number.isNaN(diff) ? 0 : diff;
}
exports.getPercentageDiff = getPercentageDiff;
function calcChange({ isExistsInCurrBranch, isExistsInBaseBranch, diffBytes }) {
    if (isExistsInCurrBranch && isExistsInBaseBranch) {
        // return update only if the change is greater than 10 bytes
        if (Math.abs(diffBytes) > 10) {
            return consts_1.DiffChange.Update;
        }
        else {
            return consts_1.DiffChange.NoChange;
        }
    }
    if (isExistsInCurrBranch) {
        return consts_1.DiffChange.Add;
    }
    return consts_1.DiffChange.Remove;
}
exports.calcChange = calcChange;
function getStatusObject({ currBranchFile, change, diffPercent }) {
    const failReasons = [];
    if (currBranchFile?.maxSize && currBranchFile.size > currBranchFile.maxSize) {
        failReasons.push(consts_1.FailReason.MaxSize);
    }
    if (change === consts_1.DiffChange.Update &&
        currBranchFile?.maxPercentIncrease &&
        diffPercent > currBranchFile.maxPercentIncrease) {
        failReasons.push(consts_1.FailReason.MaxPercentIncrease);
    }
    if (failReasons.length === 0) {
        return { status: consts_1.Status.Pass };
    }
    return { status: consts_1.Status.Fail, failReasons };
}
exports.getStatusObject = getStatusObject;
