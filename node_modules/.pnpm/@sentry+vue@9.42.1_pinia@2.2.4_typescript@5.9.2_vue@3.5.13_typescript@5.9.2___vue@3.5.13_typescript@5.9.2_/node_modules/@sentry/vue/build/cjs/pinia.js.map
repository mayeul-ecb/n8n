{"version":3,"file":"pinia.js","sources":["../../src/pinia.ts"],"sourcesContent":["import { addBreadcrumb, addNonEnumerableProperty, getClient, getCurrentScope, getGlobalScope } from '@sentry/core';\nimport type { Ref } from 'vue';\n\n// Inline Pinia types\ntype StateTree = Record<string | number | symbol, any>;\ntype PiniaPlugin = (context: {\n  store: {\n    $id: string;\n    $state: unknown;\n    $onAction: (callback: (context: { name: string; after: (callback: () => void) => void }) => void) => void;\n  };\n  pinia: { state: Ref<Record<string, StateTree>> };\n}) => void;\n\ntype SentryPiniaPluginOptions = {\n  attachPiniaState: boolean;\n  addBreadcrumbs: boolean;\n  actionTransformer: (action: string) => any;\n  stateTransformer: (state: Record<string, unknown>) => any;\n};\n\nconst DEFAULT_PINIA_PLUGIN_OPTIONS: SentryPiniaPluginOptions = {\n  attachPiniaState: true,\n  addBreadcrumbs: true,\n  actionTransformer: action => action,\n  stateTransformer: state => state,\n};\n\nconst getAllStoreStates = (\n  pinia: { state: Ref<Record<string, StateTree>> },\n  stateTransformer?: SentryPiniaPluginOptions['stateTransformer'],\n): Record<string, unknown> => {\n  const states: Record<string, unknown> = {};\n\n  try {\n    Object.keys(pinia.state.value).forEach(storeId => {\n      states[storeId] = pinia.state.value[storeId];\n    });\n\n    return stateTransformer ? stateTransformer(states) : states;\n  } catch {\n    return states;\n  }\n};\n\nexport const createSentryPiniaPlugin: (\n  userOptions?: Partial<SentryPiniaPluginOptions>,\n) => PiniaPlugin = userOptions => {\n  const options: SentryPiniaPluginOptions = { ...DEFAULT_PINIA_PLUGIN_OPTIONS, ...userOptions };\n\n  const plugin: PiniaPlugin = ({ store, pinia }) => {\n    options.attachPiniaState !== false &&\n      getGlobalScope().addEventProcessor((event, hint) => {\n        try {\n          // Get current timestamp in hh:mm:ss\n          const timestamp = new Date().toTimeString().split(' ')[0];\n          const filename = `pinia_state_all_stores_${timestamp}.json`;\n\n          // event processor runs for each pinia store - attachment should only be added once per event\n          const hasExistingPiniaStateAttachment = hint.attachments?.some(attachment =>\n            attachment.filename.startsWith('pinia_state_all_stores_'),\n          );\n\n          if (!hasExistingPiniaStateAttachment) {\n            hint.attachments = [\n              ...(hint.attachments || []),\n              {\n                filename,\n                data: JSON.stringify(getAllStoreStates(pinia, options.stateTransformer)),\n              },\n            ];\n          }\n        } catch {\n          // empty\n        }\n\n        return event;\n      });\n\n    store.$onAction(context => {\n      context.after(() => {\n        const transformedActionName = options.actionTransformer(context.name);\n\n        if (\n          typeof transformedActionName !== 'undefined' &&\n          transformedActionName !== null &&\n          options.addBreadcrumbs !== false\n        ) {\n          addBreadcrumb({\n            category: 'pinia.action',\n            message: `Store: ${store.$id} | Action: ${transformedActionName}`,\n            level: 'info',\n          });\n        }\n\n        /* Set latest state of all stores to scope */\n        const allStates = getAllStoreStates(pinia, options.stateTransformer);\n        const scope = getCurrentScope();\n        const currentState = scope.getScopeData().contexts.state;\n\n        if (typeof allStates !== 'undefined' && allStates !== null) {\n          const client = getClient();\n          const options = client?.getOptions();\n          const normalizationDepth = options?.normalizeDepth || 3; // default state normalization depth to 3\n          const piniaStateContext = { type: 'pinia', value: allStates };\n\n          const newState = {\n            ...(currentState || {}),\n            state: piniaStateContext,\n          };\n\n          addNonEnumerableProperty(\n            newState,\n            '__sentry_override_normalization_depth__',\n            3 + // 3 layers for `state.value.transformedState\n              normalizationDepth, // rest for the actual state\n          );\n\n          scope.setContext('state', newState);\n        } else {\n          scope.setContext('state', {\n            ...(currentState || {}),\n            state: { type: 'pinia', value: 'undefined' },\n          });\n        }\n      });\n    });\n  };\n\n  return plugin;\n};\n"],"names":["getGlobalScope","addBreadcrumb","getCurrentScope","getClient","addNonEnumerableProperty"],"mappings":"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"}