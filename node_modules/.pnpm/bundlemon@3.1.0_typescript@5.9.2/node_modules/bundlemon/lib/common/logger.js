"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLogger = exports.setVerbose = void 0;
const chalk_1 = __importDefault(require("chalk"));
let _verbose = false;
const setVerbose = (verbose) => {
    _verbose = verbose;
};
exports.setVerbose = setVerbose;
class Logger {
    prefix;
    constructor(prefix) {
        this.prefix = prefix;
    }
    log = (message) => {
        console.log(this.messageWithPrefix(message));
    };
    debug = (message) => {
        if (!_verbose) {
            return;
        }
        console.log(chalk_1.default.grey(`[DEBUG] ${this.messageWithPrefix(message)}`));
    };
    info = (message) => {
        console.log(chalk_1.default.cyan(`[INFO] ${this.messageWithPrefix(message)}`));
    };
    warn = (message) => {
        console.log(chalk_1.default.yellow(`[WARN] ${this.messageWithPrefix(message)}`));
    };
    error = (message, err) => {
        console.error(chalk_1.default.red(`[ERROR] ${this.messageWithPrefix(message)}`));
        if (err) {
            if (err instanceof Error) {
                console.error(err);
            }
            else {
                console.error(chalk_1.default.red(err));
            }
        }
    };
    messageWithPrefix = (message) => {
        return (this.prefix ? this.prefix + ': ' : '').concat(message);
    };
    clone = (prefix) => {
        const newLogger = new Logger((this.prefix ? `${this.prefix} - ` : '') + prefix);
        return newLogger;
    };
}
const logger = new Logger();
exports.default = logger;
function createLogger(prefix) {
    return logger.clone(prefix);
}
exports.createLogger = createLogger;
