"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrCreateProjectId = exports.createCommitRecord = exports.serviceClient = void 0;
const axios_1 = __importDefault(require("axios"));
const axios_retry_1 = __importDefault(require("axios-retry"));
const logger_1 = __importStar(require("./logger"));
const consts_1 = require("./consts");
exports.serviceClient = axios_1.default.create({
    baseURL: `${consts_1.serviceUrl}/v1`,
    timeout: 7000,
    headers: {
        'x-api-client-name': 'bundlemon-cli',
        'x-api-client-version': consts_1.version,
    },
});
(0, axios_retry_1.default)(exports.serviceClient, {
    retries: 2,
    shouldResetTimeout: true,
    retryDelay: (retryNumber = 0) => {
        const delay = Math.pow(2, retryNumber) * 2000;
        const randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay
        return delay + randomSum;
    },
    retryCondition: (e) => {
        return axios_retry_1.default.isNetworkError(e) || e.response?.status === 429;
    },
    onRetry: (retryCount, error, _requestConfig) => {
        logger_1.default.warn(`request failed attempt ${retryCount}`);
        logError(error, 'request');
    },
});
function logError(err, prefix) {
    const logger = (0, logger_1.createLogger)(prefix);
    if (err.isAxiosError) {
        const axiosError = err;
        if (axiosError.response) {
            let responseData = axiosError.response.data;
            try {
                responseData = JSON.stringify(responseData, null, 2);
            }
            catch {
                // Do nothing...
            }
            switch (axiosError.response.status) {
                case 400: {
                    logger.error('validation failed', responseData);
                    break;
                }
                case 403: {
                    // TODO: add documentation about this kind of error
                    logger.error('bad project credentials', responseData);
                    break;
                }
                default: {
                    logger.error(`server returned ${axiosError.response.status}`, responseData);
                }
            }
        }
        else if (axiosError.request) {
            // client never received a response, or request never left
            logger.error(`Cant reach server (${consts_1.serviceUrl}) code "${axiosError.code}"`);
        }
        else {
            logger.error('Unknown error', err);
        }
    }
    else {
        logger.error('Unknown error', err);
    }
}
async function createCommitRecord(projectId, payload, authParams) {
    try {
        const res = await exports.serviceClient.post(`/projects/${projectId}/commit-records`, payload, {
            params: authParams,
        });
        return res.data;
    }
    catch (err) {
        logError(err, 'create commit record');
    }
    return undefined;
}
exports.createCommitRecord = createCommitRecord;
async function getOrCreateProjectId(details, auth) {
    try {
        const res = await exports.serviceClient.post(`/projects/id`, details, { params: auth });
        return res.data.id;
    }
    catch (err) {
        logError(err, 'get or create project id');
    }
    return undefined;
}
exports.getOrCreateProjectId = getOrCreateProjectId;
