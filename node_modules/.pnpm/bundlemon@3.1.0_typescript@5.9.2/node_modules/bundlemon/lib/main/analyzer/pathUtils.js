"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMatchFiles = exports.getRegexHash = exports.createPrettyPath = exports.getAllPaths = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const micromatch = __importStar(require("micromatch"));
async function getAllPaths(dirPath) {
    const entries = await fs.promises.readdir(dirPath, { withFileTypes: true });
    const files = entries.filter((file) => !file.isDirectory()).map((file) => path.join(dirPath, file.name));
    const folders = entries.filter((folder) => folder.isDirectory());
    for (const folder of folders)
        files.push(...(await getAllPaths(path.join(dirPath, folder.name))));
    return files;
}
exports.getAllPaths = getAllPaths;
function createPrettyPath(pathLabelNames, filePath, globPattern) {
    let prettyPath = filePath;
    const re = micromatch.makeRe(globPattern);
    const groups = re.exec(filePath)?.groups || {};
    Object.entries(groups).forEach(([key, value]) => {
        pathLabelNames.forEach((label) => {
            if (new RegExp(`^${label}\\d+`).test(key)) {
                prettyPath = prettyPath.replace(value, `(${label})`);
            }
        });
    });
    return prettyPath;
}
exports.createPrettyPath = createPrettyPath;
function getRegexHash(name, regex, index) {
    return `(?<${name}${index}>${regex})`;
}
exports.getRegexHash = getRegexHash;
async function getMatchFiles(baseDir, files, pathLabels, patterns, stopOnMatch) {
    const patternsMap = patterns.map((originalPattern) => {
        let index = 0;
        let pattern = originalPattern;
        Object.entries(pathLabels).forEach(([name, regex]) => {
            const re = new RegExp(`<${name}>`, 'g');
            pattern = pattern.replace(re, () => getRegexHash(name, regex, index++));
        });
        return { originalPattern, pattern };
    });
    const pathLabelNames = Object.keys(pathLabels);
    const filesGroupByPattern = {};
    for (const fullPath of files) {
        const relativePath = path.relative(baseDir, fullPath);
        for (const { originalPattern, pattern } of patternsMap) {
            if (micromatch.isMatch(relativePath, pattern)) {
                if (!filesGroupByPattern[originalPattern]) {
                    filesGroupByPattern[originalPattern] = [];
                }
                const prettyPath = createPrettyPath(pathLabelNames, relativePath, pattern);
                filesGroupByPattern[originalPattern].push({ fullPath, prettyPath });
                if (stopOnMatch) {
                    break;
                }
            }
        }
    }
    return filesGroupByPattern;
}
exports.getMatchFiles = getMatchFiles;
