"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bytes_1 = __importDefault(require("bytes"));
const chalk_1 = __importDefault(require("chalk"));
const bundlemon_utils_1 = require("bundlemon-utils");
const logger_1 = __importDefault(require("../../../common/logger"));
const utils_1 = require("../utils");
function print(status, changeText, message) {
    const color = status === bundlemon_utils_1.Status.Pass ? 'green' : 'red';
    logger_1.default.log(`  ${chalk_1.default[color](`[${status.toUpperCase()}]`)} ${changeText}${message}`);
}
function printDiffSection(files, haveBaseRecord) {
    files.forEach((f) => {
        const changeText = haveBaseRecord ? `(${f.diff.change}) ` : '';
        const diffPercentText = f.diff.change === bundlemon_utils_1.DiffChange.Update ? ' ' + (0, utils_1.getDiffPercentText)(f.diff.percent) : '';
        const diffText = haveBaseRecord ? ` (${(0, utils_1.getDiffSizeText)(f.diff.bytes)}${diffPercentText})` : '';
        const maxSizeText = f.maxSize ? ` ${f.size <= f.maxSize ? '<' : '>'} ${(0, bytes_1.default)(f.maxSize)}` : '';
        print(f.status, changeText, `${f.path}: ${(0, bytes_1.default)(f.size)}${diffText}${maxSizeText}`);
    });
}
const output = {
    name: 'console',
    create: () => {
        return {
            generate: (report) => {
                const { files, groups, metadata: { linkToReport, baseRecord }, } = report;
                logger_1.default.log('\n');
                logger_1.default.log('Files:');
                printDiffSection(files, !!baseRecord);
                logger_1.default.log('\n');
                if (groups.length > 0) {
                    logger_1.default.log('Groups:');
                    printDiffSection(groups, !!baseRecord);
                    logger_1.default.log('\n');
                }
                logger_1.default.log((0, bundlemon_utils_1.getReportConclusionText)(report));
                if (linkToReport) {
                    logger_1.default.log(`\nView report: ${linkToReport}`);
                }
                logger_1.default.log('\n');
            },
        };
    },
};
exports.default = output;
