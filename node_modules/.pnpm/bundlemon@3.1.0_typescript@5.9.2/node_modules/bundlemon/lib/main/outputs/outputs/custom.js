"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yup = __importStar(require("yup"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const logger_1 = require("../../../common/logger");
const validationUtils_1 = require("../../utils/validationUtils");
const NAME = 'custom';
const logger = (0, logger_1.createLogger)(`${NAME} output`);
function validateOptions(options) {
    const schema = yup.object().required().shape({
        path: yup.string().required(),
    });
    const normalizedOptions = (0, validationUtils_1.validateYup)(schema, options, `${NAME} output`);
    if (!normalizedOptions) {
        throw new Error(`validation error in output "${NAME}" options`);
    }
    return normalizedOptions;
}
const output = {
    name: NAME,
    create: async ({ options }) => {
        const normalizedOptions = validateOptions(options);
        const resolvedPath = path_1.default.resolve(normalizedOptions.path);
        if (!fs_1.default.existsSync(resolvedPath)) {
            throw new Error(`custom output file not found: ${resolvedPath}`);
        }
        logger.debug(`Importing ${resolvedPath}`);
        const customOutput = await Promise.resolve(`${resolvedPath}`).then(s => __importStar(require(s)));
        if (typeof customOutput.default !== 'function') {
            throw new Error('custom output should export default function');
        }
        return {
            generate: async (report) => {
                await customOutput.default(report);
            },
        };
    },
};
exports.default = output;
