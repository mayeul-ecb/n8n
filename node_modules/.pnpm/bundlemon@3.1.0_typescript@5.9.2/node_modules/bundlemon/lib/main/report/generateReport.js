"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReport = void 0;
const bundlemon_utils_1 = require("bundlemon-utils");
const logger_1 = __importDefault(require("../../common/logger"));
const service_1 = require("../../common/service");
async function generateReport(config, input) {
    logger_1.default.info('Start generating report');
    const subProject = config.subProject;
    let record;
    let baseRecord;
    let linkToReport;
    if (!config.remote) {
        logger_1.default.warn('remote flag is OFF, showing only local results');
    }
    else {
        const { gitVars } = config;
        logger_1.default.info(`Create commit record for branch "${gitVars.branch}"`);
        const result = await (0, service_1.createCommitRecord)(config.projectId, {
            subProject,
            ...gitVars,
            ...input,
        }, config.getCreateCommitRecordAuthParams());
        if (!result) {
            logger_1.default.error('Failed to create commit record');
            return undefined;
        }
        ({ record, baseRecord, linkToReport } = result);
        logger_1.default.info(`Commit record "${result.record.id}" has been successfully created`);
    }
    const diffReport = (0, bundlemon_utils_1.generateDiffReport)(input, baseRecord ? { files: baseRecord.files, groups: baseRecord.groups } : undefined);
    const report = {
        ...diffReport,
        metadata: { subProject, linkToReport, record, baseRecord },
    };
    logger_1.default.info('Finished generating report');
    // If the record and the base record have the same branch, that probably mean it's a merge commit, so no need to fail the report
    if (report.status === bundlemon_utils_1.Status.Fail && record?.branch && record?.branch === baseRecord?.branch) {
        report.status = bundlemon_utils_1.Status.Pass;
        logger_1.default.info('Merge commit detected, change report status to "Pass"');
    }
    return report;
}
exports.generateReport = generateReport;
