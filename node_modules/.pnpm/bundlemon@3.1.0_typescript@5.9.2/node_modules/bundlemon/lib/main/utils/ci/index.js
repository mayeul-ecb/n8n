"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.targetBranch = exports.prNumber = exports.commitSha = exports.branch = exports.repo = exports.owner = exports.provider = exports.ci = exports.getCIVars = void 0;
const providers_1 = __importDefault(require("./providers"));
const utils_1 = require("../utils");
const rawOverrideVars = (0, utils_1.envVarsListToObject)([
    'CI',
    'CI_REPO_OWNER',
    'CI_REPO_NAME',
    'CI_BRANCH',
    'CI_COMMIT_SHA',
    'CI_TARGET_BRANCH',
    'CI_PR_NUMBER',
    'CI_COMMIT_MESSAGE',
]);
const overrideVars = {
    raw: rawOverrideVars,
    ci: rawOverrideVars.CI === 'true',
    provider: undefined,
    owner: rawOverrideVars.CI_REPO_OWNER,
    repo: rawOverrideVars.CI_REPO_NAME,
    branch: rawOverrideVars.CI_BRANCH,
    commitSha: rawOverrideVars.CI_COMMIT_SHA,
    targetBranch: rawOverrideVars.CI_TARGET_BRANCH,
    prNumber: rawOverrideVars.CI_PR_NUMBER,
    commitMsg: rawOverrideVars.CI_COMMIT_MESSAGE,
};
const providerVars = providers_1.default.find((p) => p.isItMe)?.getVars();
const vars = { ...overrideVars };
if (providerVars) {
    // Use provider var if override var is undefined
    Object.keys(providerVars).forEach((varName) => {
        // @ts-expect-error bad types
        vars[varName] = vars[varName] ?? providerVars[varName];
    });
    vars.raw = {
        ...providerVars.raw,
        ...overrideVars.raw,
    };
}
const getCIVars = () => {
    return vars;
};
exports.getCIVars = getCIVars;
exports.default = vars;
const { ci, provider, owner, repo, branch, commitSha, prNumber, targetBranch } = vars;
exports.ci = ci;
exports.provider = provider;
exports.owner = owner;
exports.repo = repo;
exports.branch = branch;
exports.commitSha = commitSha;
exports.prNumber = prNumber;
exports.targetBranch = targetBranch;
